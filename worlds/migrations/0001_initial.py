# Generated by Django 2.2.2 on 2019-06-16 00:08

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'character',
                'verbose_name_plural': 'characters',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'place',
                'verbose_name_plural': 'places',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=255, verbose_name='url')),
                ('cite', models.CharField(max_length=255, verbose_name='cite')),
            ],
            options={
                'verbose_name': 'reference',
                'verbose_name_plural': 'references',
            },
        ),
        migrations.CreateModel(
            name='World',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'world',
                'verbose_name_plural': 'worlds',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('rank', models.CharField(max_length=50, verbose_name='rank')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.Character')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.Place')),
            ],
            options={
                'verbose_name': 'title',
                'verbose_name_plural': 'titles',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.World')),
            ],
            options={
                'verbose_name': 'setting',
                'verbose_name_plural': 'settings',
            },
        ),
        migrations.AddField(
            model_name='place',
            name='world',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.World'),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.World')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Honor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.Character')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='worlds.Organization')),
            ],
            options={
                'verbose_name': 'honor',
                'verbose_name_plural': 'honors',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FamilyTie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_order', models.IntegerField(default=0, verbose_name='birth order')),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='worlds.Character')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='worlds.Character')),
            ],
            options={
                'verbose_name': 'familytie',
                'verbose_name_plural': 'familyties',
                'ordering': ('birth_order',),
            },
        ),
        migrations.CreateModel(
            name='EventParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('role', models.CharField(blank=True, default='participant', max_length=15, verbose_name='role')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.Character')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.Event')),
            ],
            options={
                'verbose_name': 'event_participation',
                'verbose_name_plural': 'event_participations',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='participants',
            field=models.ManyToManyField(blank=True, through='worlds.EventParticipation', to='worlds.Character'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='event',
            name='world',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.World'),
        ),
        migrations.CreateModel(
            name='CharacterRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_type', models.TextField(choices=[('span', 'Span'), ('instant', 'Instant')], default='span', verbose_name='Time type')),
                ('start_year', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('start_month', models.IntegerField(blank=True, null=True, verbose_name='start month')),
                ('start_day', models.IntegerField(blank=True, null=True, verbose_name='start day')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='start time')),
                ('end_year', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('end_month', models.IntegerField(blank=True, null=True, verbose_name='end month')),
                ('end_day', models.IntegerField(blank=True, null=True, verbose_name='end day')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='end time')),
                ('rel', models.CharField(max_length=50, verbose_name='relation')),
                ('rev', models.CharField(max_length=50, verbose_name='reverse relation')),
                ('from_char', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='worlds.Character')),
                ('to_char', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='worlds.Character')),
            ],
            options={
                'verbose_name': 'characterrelationship',
                'verbose_name_plural': 'characterrelationships',
                'ordering': ['start_year', 'start_month', 'start_day', 'start_time', 'end_year', 'end_month', 'end_day', 'end_time'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='character',
            name='children',
            field=models.ManyToManyField(blank=True, related_name='_character_children_+', through='worlds.FamilyTie', to='worlds.Character', verbose_name='children'),
        ),
        migrations.AddField(
            model_name='character',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='_character_parents_+', through='worlds.FamilyTie', to='worlds.Character', verbose_name='parents'),
        ),
        migrations.AddField(
            model_name='character',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='character',
            name='world',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worlds.World'),
        ),
        migrations.AddIndex(
            model_name='title',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_titl_start_y_36d726_idx'),
        ),
        migrations.AddIndex(
            model_name='title',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_titl_end_yea_f27925_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_orga_start_y_a6b637_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_orga_end_yea_0e5c58_idx'),
        ),
        migrations.AddIndex(
            model_name='honor',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_hono_start_y_88b800_idx'),
        ),
        migrations.AddIndex(
            model_name='honor',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_hono_end_yea_4430e8_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_even_start_y_4d556e_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_even_end_yea_a1a396_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_even_start_y_48afad_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_even_end_yea_d8fca2_idx'),
        ),
        migrations.AddIndex(
            model_name='characterrelationship',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_char_start_y_55d5e9_idx'),
        ),
        migrations.AddIndex(
            model_name='characterrelationship',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_char_end_yea_43db77_idx'),
        ),
        migrations.AddIndex(
            model_name='character',
            index=models.Index(fields=['start_year', 'start_month', 'start_day', 'start_time'], name='worlds_char_start_y_b26ec2_idx'),
        ),
        migrations.AddIndex(
            model_name='character',
            index=models.Index(fields=['end_year', 'end_month', 'end_day', 'end_time'], name='worlds_char_end_yea_5f1918_idx'),
        ),
    ]
